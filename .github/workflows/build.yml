name: Build Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.conan
          ~/Library/Caches/conan/
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~\.conan\data
        key: ${{ matrix.os }}-conan-${{ hashFiles('**/conanfile.txt', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ matrix.os }}-conan-
    
    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install conan==1.59.0
    
    - name: Setup Conan for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create default profile if it doesn't exist
        if ! conan profile list | grep -q default; then
          conan profile new default --detect
        fi
        # Update the libcxx setting
        conan profile update settings.compiler.libcxx=libstdc++11 default
      shell: bash
    
    - name: Setup Conan for Windows
      if: matrix.os == 'windows-latest'
      run: |
        @REM Check if default profile exists
        conan profile list > profiles.txt
        findstr /C:"default" profiles.txt > nul
        if errorlevel 1 (
          conan profile new default --detect
        )
        del profiles.txt
      shell: cmd
    
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake build-essential pkg-config
        sudo apt-get install -y libssl-dev libsqlite3-dev libfmt-dev libcurl4-openssl-dev
        
        # Verify SQLite3 installation
        pkg-config --cflags --libs sqlite3 || echo "SQLite3 not found in pkg-config"
        find /usr -name "sqlite3.h" || echo "sqlite3.h not found"
        find /usr -name "libsqlite3.so" || echo "libsqlite3.so not found"
      
    - name: Create Build Directory
      run: mkdir -p build
      shell: bash
      
    - name: Install Windows Dependencies with Conan
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        conan install .. --build=missing -s build_type=Debug
      shell: bash
    
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug ..
      shell: bash
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MODULE_PATH="$PWD" -DCMAKE_PREFIX_PATH="$PWD"
      shell: bash
    
    - name: Build Project
      run: |
        cd build
        cmake --build . --config Debug
      shell: bash
    
    - name: Create SSL Directory and Files
      run: |
        mkdir -p bin/ssl
        cat > bin/ssl/server.crt << 'EOL'
        -----BEGIN CERTIFICATE-----
        MIIEMTCCAxmgAwIBAgIUBiHPF+Ggsymc8YpFicv5cnJMlj4wDQYJKoZIhvcNAQEL
        BQAwgaYxCzAJBgNVBAYTAklEMRAwDgYDVQQIDAdKYWthcnRhMRAwDgYDVQQHDAdK
        YWthcnRhMRQwEgYDVQQKDAtWZXJ0aW9uIEx0ZDEgMB4GA1UECwwXVmVydGlvbiBT
        ZWN0b3IgR2FtZSBEZXYxGzAZBgNVBAMMEnd3dy5ncm93dG9waWExLmNvbTEeMBwG
        CSqGSIb3DQEJARYPeW9ydWFraW9AZmJpLmFjMCAXDTI0MDcyOTE2MDQzNloYDzIw
        NTExMjE0MTYwNDM2WjCBpjELMAkGA1UEBhMCSUQxEDAOBgNVBAgMB0pha2FydGEx
        EDAOBgNVBAcMB0pha2FydGExFDASBgNVBAoMC1ZlcnRpb24gTHRkMSAwHgYDVQQL
        DBdWZXJ0aW9uIFNlY3RvciBHYW1lIERldjEbMBkGA1UEAwwSd3d3Lmdyb3d0b3Bp
        YTEuY29tMR4wHAYJKoZIhvcNAQkBFg95b3J1YWtpb0BmYmkuYWMwggEiMA0GCSqG
        SIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0aPAePSUlIorLmSkal7NjsCACp6JgbHaS
        5l9UWSFsdv9YB77ZNE/xOFQKJXgfT3wxDdXfXj359vDSbOJh6kWw4qxzmiY/A2gm
        t5sdJBl+nEfCZMUckSNExi2tI8CIh96X1qetdg8ALKbIq098mJwmYzLN4E0cIf/n
        CbCwSXTtz0bOX/eEKlHOZyVKgsrrUPm0Q5jT3eNJss9nN8Xk30nPs9fAPs2GO/G4
        AKIWsqHdP5UumbW7DmTbQKa5NNux7u+fDy+yU4kqwWMD3Mhz3AfOSEuYtvS9/Mgz
        AKg4J5j6Vjq+J/xR3xjhN6ztjbl1/4fgfhVxxJvnMw+D03Nhf21PAgMBAAGjUzBR
        MB0GA1UdDgQWBBSzTMmvaR4u9UKkf0NpF5LKSvvqXDAfBgNVHSMEGDAWgBSzTMmv
        aR4u9UKkf0NpF5LKSvvqXDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUA
        A4IBAQCWrEZIKhNNjx0843ujsxXsRBA3qzG7FjhQ8+2gSt4TFnh5STIEbF34/DbF
        22HBxrZy+jW0lXseJTOI/RH2qcDHpOMKoEC5I5SAiXd1wjOR6Yy7a/fvrxglbkcc
        YCZig7gqax18U8HF/sk6apcIaEpKuMohZ1ZF4KiEJgm07RoCcGNjrg6Ch5ectFxB
        6JR/8fRZ42s/pgP2IOsZ64XMY/Xcm5DWsEOGD/80NEiAhlWAN/JELv+johcUvXLa
        7uAfZ88c42eDL1zkD0yCmx5tOXgoS7OxJTCyL1AVcFSLu1ioMsySJ0hiQ95os+kQ
        s3UKdSJjmu0BR3S1tNiwgf1BYd/z
        -----END CERTIFICATE-----
        EOL

        cat > bin/ssl/server.key << 'EOL'
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC0aPAePSUlIorL
        mSkal7NjsCACp6JgbHaS5l9UWSFsdv9YB77ZNE/xOFQKJXgfT3wxDdXfXj359vDS
        bOJh6kWw4qxzmiY/A2gmt5sdJBl+nEfCZMUckSNExi2tI8CIh96X1qetdg8ALKbI
        q098mJwmYzLN4E0cIf/nCbCwSXTtz0bOX/eEKlHOZyVKgsrrUPm0Q5jT3eNJss9n
        N8Xk30nPs9fAPs2GO/G4AKIWsqHdP5UumbW7DmTbQKa5NNux7u+fDy+yU4kqwWMD
        3Mhz3AfOSEuYtvS9/MgzAKg4J5j6Vjq+J/xR3xjhN6ztjbl1/4fgfhVxxJvnMw+D
        03Nhf21PAgMBAAECggEAGbDB1MSHSBj5o9GNKWTF3mHDxS0C8fEwF24n0BabLFtr
        tCjyM/L/mU2YphM83lSOzlt2g8bjU3enRofL2v6l6vD0dsfSP3HoQG8v7v/ng4CU
        tWltKkq+t3nzIi8vqSGUAJJIMWrY6wDwxS2j9Y2z2sGQiAGzaVisHMXj+86SEJUQ
        PVUyhvovVEEXvgbyAsHfYTicqCUEf3hY35CNusgn2ykot9uLC0JODCOZoQV338Eb
        M0Wr0Mi3SFJkwOQuSDTjcOZ9KnXVK3Kl+JFUD51cWPINy1R9g+tavtrL/OeYAJmQ
        hMXG073PwwxYpiiwq7WjIfljb8eLlP9ZunCUnaYmAQKBgQD7b1ic1Th/TqnLYiFH
        ZSVWWdOdGSs02o2iXa2ZzVnMhGO9PcpsW3NmL+z/dFhNz5DlohPw20Kc9Q8rmyLJ
        idYza1mnwH94hyilSEIfo/4SFH+MK8vdESK+z5xNuEL1YhK61DvNVnaO7xMJmKPw
        BIZnYSPDigUTm7EYKrvTpNbaAQKBgQC3r3jQEdPfdjklwhF/FqOeHIMbKH/jkYG/
        Bw8p2Ng+uqQrUwhtbyjKxnps+czekvFbqw6JpuAzkJ4NA+c4Cr2h+FKnc1gPO3y4
        +zjgxdfYAnAcjpUEp34VV6oBVFucJFadp0jXwDxf8+xUlz7v/JFBwSjErAuIqgJn
        4DWCL/wnTwKBgHMoTC2IepfUL3A3QYaxjKg/++u321IZx0TWIuyOYNKK0COcaVm3
        iOMEkEdvwgHhTzvdP8TQp3G7y3btVsF3n+NtB2MNh1RskvEgZyiWs4cUXFaWuIhH
        kOJTtALkocZBZNKs4bbqIuLUHKQIhQ0pBWXT1813KVwRssqex+fnV4ABAoGAckqi
        d4TAOkjLYi0Qye0CPX0sLpfSi3ycKIpx6u3cD5v+Tl7J3Z3O2e0JfAkqakswFoOm
        9gt5cVxIm3yUQBCe0cs7Uqm4XzH6dvcJ+wHfPa62p24oVs8I6qqzQ0SEA/GwW0Qd
        VPFuH54crL23EYgrsahIf6c1PgHaoVumr6y/zo0CgYAYIH/rjZwvB4X54x3U1+m3
        wNXI4U0k3ebe2sHUaTcrIW20aMV0MS0nIqJEImPDaUzYQXWALyCdNjg7MnbrkzOe
        AkmOh6Gg3bkykNGtchc0oVxl8rPqR02jDHPMP+Vp4uWFgiHoHjb4reConNFfyFPQ
        zzkfV5CsiV/lRUdligDE6Q==
        -----END PRIVATE KEY-----
        EOL
      shell: bash
    
    - name: Copy Config Template
      run: |
        if [ ! -f bin/config.json ]; then
        echo '{"ip":"127.0.0.1","port":17091,"loginurl":"gtbackend-login.vercel.app","rateLimit":50,"rateLimitTime":300,"trustedRegion":["ID","SG","MY"]}' > bin/config.json
        fi
      shell: bash
    
    - name: Get short SHA
      id: sha
      run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Create Linux Release Zip
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p releases
        cd bin
        zip -r ../releases/Releases-Linux-${{ steps.sha.outputs.short_sha }}.zip GTPSWebServer ssl config.json
      shell: bash
    
    - name: Create Windows Release Zip
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p releases
        cd bin
        # Use PowerShell's Compress-Archive instead of zip
        powershell -command "Compress-Archive -Path GTPSWebServer.exe,ssl,config.json -DestinationPath ../releases/Releases-Windows-${{ steps.sha.outputs.short_sha }}.zip -Force"
      shell: bash
    
    - name: Upload Linux Zip Artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: GTPSWebServer-Linux-Zip
        path: releases/Releases-Linux-${{ steps.sha.outputs.short_sha }}.zip
    
    - name: Upload Windows Zip Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: GTPSWebServer-Windows-Zip
        path: releases/Releases-Windows-${{ steps.sha.outputs.short_sha }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: releases
      
      - name: Display structure of downloaded files
        run: ls -R releases
        shell: bash
      
      - name: Prepare release files
        run: |
          # Move zip files to root of releases directory
          mv releases/GTPSWebServer-Linux-Zip/*.zip releases/
          mv releases/GTPSWebServer-Windows-Zip/*.zip releases/
          
          # Remove artifact directories
          rm -rf releases/GTPSWebServer-Linux-Zip
          rm -rf releases/GTPSWebServer-Windows-Zip
          
          # List the release files
          ls -la releases/
        shell: bash
      
      - name: Create release tag
        id: create_tag
        run: |
          UNIQUE_CODE=$(openssl rand -hex 3)
          TAG_NAME="Releases-${UNIQUE_CODE}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "tag_name=${UNIQUE_CODE}" >> $GITHUB_OUTPUT
        
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Releases-${{ steps.create_tag.outputs.tag_name }}
          name: Release ${{ steps.create_tag.outputs.tag_name }}
          files: releases/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}