name: Build Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.conan
          ~/Library/Caches/conan/
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~\.conan\data
        key: ${{ matrix.os }}-conan-${{ hashFiles('**/conanfile.txt', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ matrix.os }}-conan-
    
    - name: Install Conan
      run: |
        python -m pip install --upgrade pip
        pip install conan==1.59.0
    
    - name: Setup Conan for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create default profile if it doesn't exist
        if ! conan profile list | grep -q default; then
          conan profile new default --detect
        fi
        # Update the libcxx setting
        conan profile update settings.compiler.libcxx=libstdc++11 default
      shell: bash
    
    - name: Setup Conan for Windows
      if: matrix.os == 'windows-latest'
      run: |
        @REM Check if default profile exists
        conan profile list > profiles.txt
        findstr /C:"default" profiles.txt > nul
        if errorlevel 1 (
          conan profile new default --detect
        )
        del profiles.txt
      shell: cmd
    
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake build-essential libssl-dev libsqlite3-dev libfmt-dev libcurl4-openssl-dev
      
    - name: Create Build Directory
      run: mkdir -p build
      shell: bash
      
    - name: Install Windows Dependencies with Conan
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        conan install .. --build=missing -s build_type=Debug
      shell: bash
    
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug ..
      shell: bash
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MODULE_PATH="$PWD" -DCMAKE_PREFIX_PATH="$PWD"
      shell: bash
    
    - name: Build Project
      run: |
        cd build
        cmake --build . --config Debug
      shell: bash
    
    - name: Create SSL Directory
      run: |
        mkdir -p bin/ssl
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          openssl req -x509 -newkey rsa:4096 -keyout bin/ssl/server.key -out bin/ssl/server.crt -days 365 -nodes -subj "/CN=localhost"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          openssl req -x509 -newkey rsa:4096 -keyout bin/ssl/server.key -out bin/ssl/server.crt -days 365 -nodes -subj "/CN=localhost"
        fi
      shell: bash
    
    - name: Copy Config Template
      run: |
        if [ ! -f bin/config.json ]; then
          echo '{"ip":"127.0.0.1","port":17091,"loginurl":"gtbackend-login.vercel.app","rateLimit":50,"rateLimitTime":300,"trustedRegion":["ID","SG","MY"]}' > bin/config.json
        fi
      shell: bash
    
    - name: Upload Linux Artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: GTPSWebServer-Linux
        path: |
          bin/GTPSWebServer
          bin/ssl
          bin/config.json
    
    - name: Upload Windows Artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: GTPSWebServer-Windows
        path: |
          bin/Debug/GTPSWebServer.exe
          bin/ssl
          bin/config.json
